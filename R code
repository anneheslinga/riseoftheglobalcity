#Code should be performed in the following order.


#Download R packages from CRAN. Be sure that you are connected to the internet for this step.

install.packages("tidyr")
install.packages("tidyselect")
install.packages("tidytext")
install.packages("tidyverse")
install.packages("tokenizers")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("readxl")
install.packages("wordcloud")
install.packages("scale")

#Load R packages
library(tidyr)
library(tidyselect)
library(tidytext)
library(tidyverse)
library(tokenizers)
library(dplyr)
library(ggplot)
library(readxl)
library(wordcloud)
library(scale)

#Convert your data into a character vector

reviews <- restaurant_reviews_rotterdam %>%
    group_by(cuisine) %>%
    mutate(linenumber = row_number(),
           text = `full review`) %>%
    ungroup()

reviews

#Tidying the reviews or a creating one-token-per-row format

library(tidytext)

reviews <- reviews %>%
  unnest_tokens(word, text)

reviews

#Clean your text by removing stop words

data(stop_words)
reviews <- reviews %>%
  anti_join(stop_words)
 
 
#Separate your data by cuisine type

it_reviews <- reviews %>%
filter(cuisine == "italian")

cn_reviews <- reviews %>%
filter(cuisine == "chinese")
   

#Perform a word count on your text data

it_reviews %>%
  count(word, sort = TRUE)
  
#Creating a wordplot of the words most frequently used in reviews of italian restaurants

library(ggplot2)

it_reviews %>%
  count(word, sort = TRUE) %>%
  filter(n > 200) %>%
  mutate(word = reorder(word, n)) %>%
  ggplot(aes(word, n)) +
  geom_col() +
  xlab(NULL) +
  coord_flip()
  
#Creating a wordplot of the words most frequently used in reviews of chinese restaurants

cn_reviews %>%
  count(word, sort = TRUE) %>%
  filter(n > 50) %>%
  mutate(word = reorder(word, n)) %>%
  ggplot(aes(word, n)) +
  geom_col() +
  xlab(NULL) +
  coord_flip()
  
  
#Creating a wordcloud of most frequently used words. What words in this wordcloud stick out to you?
  
library(wordcloud)

it_reviews %>%
  count(word) %>%
  with(wordcloud(word, n, max.words = 70))

#Now create a wordcloud for chinese restaurants by replacing 'it_reviews' with 'cn_reviews'
#Don't forget to save the image of your wordclouds!

#You've just performed a basic task in text analysis! Word frequency can tell you a lot about a text.


#Now let's compare the proportion of specific words in chinese restaurant reviews versus italian restaurant reviews

frequency <- bind_rows(mutate(it_reviews, cuisine = "italian"),
                       mutate(cn_reviews, cuisine = "chinese")) %>% 
    count(cuisine, word) %>%
    group_by(cuisine) %>%
    mutate(proportion = n / sum(n)) %>% 
    select(-n) %>% 
    spread(cuisine, proportion) %>% 
    gather(cuisine, proportion, `chinese`)
    
#Now let's plot the similarities

library(scale)

ggplot(frequency, aes(x = proportion, y = `italian`, color = abs(`italian` - proportion))) +
  geom_abline(color = "gray40", lty = 2) +
  geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
  geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
  scale_x_log10(labels = percent_format()) +
  scale_y_log10(labels = percent_format()) +
  scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
  facet_wrap(~cuisine, ncol = 2) +
  theme(legend.position="none") +
  labs(y = "italian restaurants", x = "chinese restaurants")

  
#Now on to Sentiment analysis
  
#Retreive a word count for words connoting "joy" using the NRC Lexicon

nrc_joy <- get_sentiments("nrc") %>% 
  filter(sentiment == "joy")

it_reviews %>%
  inner_join(nrc_joy) %>%
  count(word, sort = TRUE)
  
#Retreive a word count for words connoting "disgust" using the NRC Lexicon

nrc_disgust <- get_sentiments("nrc") %>% 
  filter(sentiment == "disgust")

it_reviews %>%
  inner_join(nrc_disgust) %>%
  count(word, sort = TRUE)
  
 
#Plot positive and negative emotions by creating an index with the Bing lexicon

#Create the index
library(tidyr)

review_sentiments <- reviews %>%
  inner_join(get_sentiments("bing")) %>%
  count(cuisine, index = linenumber %/% 5, sentiment) %>%
  spread(sentiment, n, fill = 0) %>%
  mutate(sentiment = positive - negative)
 
#And plot the reviews data frame

library(ggplot2)

ggplot(review_sentiments, aes(index, sentiment, fill = cuisine)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~cuisine, ncol = 2, scales = "free_x")
  
  
#Now plot disgust using the NRC lexicon

review_sentiments_trust <- reviews %>%
  inner_join(get_sentiments("nrc")) %>%
  count(cuisine, index = linenumber %/% 5, sentiment) %>%
  spread(sentiment, n, fill = 0) %>%
  mutate(sentiment = disgust)
 
 ggplot(review_sentiments_trust, aes(index, sentiment, fill = cuisine)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~cuisine, ncol = 2, scales = "free_x")
  

#That's all for sentiment analysis!

 
